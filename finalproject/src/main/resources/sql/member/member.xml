<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 경로 틀리면 시작시 무조건 에러 -->
<mapper namespace="com.gd.finalproject.mapper.MemberMapper">
    <resultMap id="member" type="com.gd.finalproject.vo.MemberDto">
        <result column="memberNo" property="memberNo"/>
        <result column="memberId" property="memberId"/>
        <result column="memberPw" property="memberPw"/>
        <result column="deleteYn" property="deleteYn"/>
        <collection property="memberAuth" ofType="java.lang.String" javaType="list">
            <result column="memberAuth"/>
        </collection>
    </resultMap>
    <!-- 아이디 중복체크 -->
    <select id="idCheck" resultType="string">
        SELECT member_id
        FROM member
        WHERE member_id = #{id}
    </select>
    <!-- 회원정보 가져오기 -->
    <select id="getMember" resultMap="member">
        SELECT m.member_no   memberNo,
               m.member_id   memberId,
               m.member_pw   memberPw,
               m.delete_yn   deleteYn,
               a.member_auth memberAuth
        FROM member m
                 JOIN auth a ON a.member_id = m.member_id
        WHERE m.member_id = #{id}
    </select>

    <!--회원정보 조회 -->
    <select id="memberDetail" resultMap="member">
        SELECT m.member_no         memberNo
             , m.member_id         memberId
             , m.member_pw         memberPw
             , m.member_name       memberName
             , m.member_phone      memberPhone
             , m.member_email      memberEmail
             , m.member_addr       memberAddr
             , m.member_detailAddr memberDetailAddr
             , m.member_birth      memberBirth
             , m.member_gender     memberGender
             , i.file_name         fileName
        FROM member m
                 LEFT JOIN memberimg i ON m.member_id = i.member_id
        WHERE m.member_id = #{memberId}


    </select>

    <!-- 회원가입 -->
    <insert id="signMember" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO member
        (member_id, member_pw, member_name, member_phone, member_email, member_addr, member_detailAddr, member_birth,
        <if test="dto.memberGender != null">
        member_gender,
        </if>
        create_date, update_date)
        VALUES (#{dto.memberId}, #{dto.memberPw}, #{dto.memberName},
        #{dto.memberPhone},
        #{dto.memberEmail},
        #{dto.memberAddr},
        #{dto.memberDetailAddr},
        #{dto.memberBirth},
        <if test="dto.memberGender != null">
            #{dto.memberGender},
        </if>
        NOW(), NOW());
    </insert>

    <!-- 회원 권한 넣기 -->
    <insert id="authInsert" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO auth
            (member_id, member_auth)
        VALUES (#{dto.memberId}, 'USER');
    </insert>

    <!-- 관리자 권한 넣기 -->
    <insert id="adminInsert" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO auth
            (member_id, member_auth)
        VALUES (#{dto.memberId}, 'USER'),
               (#{dto.memberId}, 'EMPLOYEE');
    </insert>
</mapper>