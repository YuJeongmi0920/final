<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 경로 틀리면 시작시 무조건 에러 -->
<mapper namespace="com.gd.finalproject.mapper.MemberMapper">
    <resultMap id="member" type="com.gd.finalproject.vo.MemberDto">
        <result column="memberNo" property="memberNo"/>
        <result column="memberId" property="memberId"/>
        <result column="memberPw" property="memberPw"/>
        <result column="deleteYn" property="deleteYn"/>
        <result column="memberName" property="memberName"/>
        <result column="memberPhone" property="memberPhone"/>
        <result column="memberEmail" property="memberEmail"/>
        <result column="memberGender" property="memberGender"/>
        <result column="updateDate" property="updateDate"/>
        <result column="memberAddr" property="memberAddr"/>
        <result column="memberDetailAddr" property="memberDetailAddr"/>
        <result column="memberBirth" property="memberBirth"/>
        <result column="memberImg" property="memberImg"/>
        <result column="createDate" property="createDate"/>
        <collection property="memberAuth" ofType="java.lang.String" javaType="list">
            <result column="memberAuth"/>
        </collection>
    </resultMap>
    <update id="memberUpdate">
        UPDATE member
        SET member_name       = #{memberDto.memberName}
          , member_email      = #{memberDto.memberEmail}
          , member_phone      = #{memberDto.memberPhone}
          , member_birth      = #{memberDto.memberBirth}
          , member_addr       = #{memberDto.memberAddr}
          , member_detailAddr = #{memberDto.memberDetailAddr}
        WHERE member_no = #{memberDto.memberNo}

    </update>
    <update id="pwChange">
        UPDATE member
        SET member_pw = #{pw}
        WHERE member_id = #{id}
          AND member_email = #{email}
    </update>
    <!-- 아이디 중복체크 -->
    <select id="idCheck" resultType="string">
        SELECT member_id
        FROM member
        WHERE member_id = #{id}
    </select>
    <!-- 회원정보 가져오기 -->
    <select id="getMember" resultMap="member">
        SELECT m.member_no         memberNo,
               m.member_id         memberId,
               m.member_pw         memberPw,
               m.delete_yn         deleteYn,
               m.member_name       memberName,
               m.member_phone      memberPhone,
               m.member_email      memberEmail,
               m.member_gender     memberGender,
               m.create_date       createDate,
               m.update_date       updateDate,
               m.member_addr       memberAddr,
               m.member_detailAddr memberDetailAddr,
               m.member_birth      memberBirth,
               a.member_auth       memberAuth,
               i.file_name         memberImg
        FROM member m
                 JOIN auth a ON a.member_id = m.member_id
                 LEFT JOIN memberImg i ON i.member_id = m.member_id
        WHERE m.member_id = #{id}
    </select>
    <!-- 메일을 통한 아이디 찾기 -->
    <select id="idFind" resultType="string">
        SELECT member_id
        FROM member
        WHERE member_email = #{email}
    </select>

    <!--회원정보 조회 -->
    <select id="memberDetail" resultMap="member">
        SELECT m.member_no         memberNo
             , m.member_id         memberId
             , m.member_pw         memberPw
             , m.member_name       memberName
             , m.member_phone      memberPhone
             , m.member_email      memberEmail
             , m.member_addr       memberAddr
             , m.member_detailAddr memberDetailAddr
             , m.member_birth      memberBirth
             , m.member_gender     memberGender
             , i.file_name         fileName
        FROM member m
                 LEFT JOIN memberImg i ON m.member_id = i.member_id
        WHERE m.member_id = #{memberId}
    </select>

    <select id="pwFind" resultType="java.lang.String">
        SELECT member_id
        FROM member
        WHERE member_email = #{email}
          AND member_id = #{id}
    </select>

    <!--    회원 리스트 토탈 -->
    <select id="getMemberTotal" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM member
    </select>


    <!--    회원리스트 가져오기-->
    <select id="getMemberList" resultMap="member">
        SELECT m.memberId, m.memberName, m.createDate, a.member_auth memberAuth
        FROM (SELECT m.member_id   memberId
                   , m.member_name memberName
                   , m.create_date createDate
              FROM member m
                  LIMIT #{beginRow}
                 , #{rowPerPage}) m
                 LEFT JOIN auth a ON a.member_id = m.memberId
    </select>
    <select id="getInstructorTotal" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM instructor
    </select>

    <!--    강사신청리스트-->
    <select id="getInstructorList" resultType="com.gd.finalproject.vo.Instructor">
        SELECT member_id   memberId
             , create_date createDate
             , introduce   introduce
             , inspectYn   inspectYn
        FROM instructor
        WHERE inspectYn = 'N'
            LIMIT #{beginRow}
            , #{rowPerPage}
    </select>


    <!-- 회원가입 -->
    <insert id="signMember" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO member
        (member_id, member_pw, member_name, member_phone, member_email, member_addr, member_detailAddr, member_birth,
        <if test="dto.memberGender != null">
            member_gender,
        </if>
        create_date, update_date)
        VALUES (#{dto.memberId}, #{dto.memberPw}, #{dto.memberName},
        #{dto.memberPhone},
        #{dto.memberEmail},
        #{dto.memberAddr},
        #{dto.memberDetailAddr},
        #{dto.memberBirth},
        <if test="dto.memberGender != null">
            #{dto.memberGender},
        </if>
        NOW(), NOW());
    </insert>

    <!-- 회원 권한 넣기 -->
    <insert id="authInsert" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO auth
            (member_id, member_auth)
        VALUES (#{dto.memberId}, 'USER');
    </insert>


    <!--user 테이블에 넣기 -->
    <insert id="userInsert" parameterType="com.gd.finalproject.vo.MemberDto">
        INSERT INTO user
            (member_id, create_date)
        VALUES (#{dto.memberId}, now());
    </insert>
    <insert id="instructorApplication" parameterType="com.gd.finalproject.vo.Instructor">
        INSERT INTO instructor
            (member_id, create_date, introduce, inspectYn)
        VALUES (#{instructor.memberId}, now(), #{instructor.introduce}, 'N');
    </insert>
    <insert id="inspectAuthInsert" parameterType="com.gd.finalproject.vo.Instructor">
        INSERT INTO auth(member_id, member_auth)
        VALUES (#{instructor.memberId}, 'INSPECT')
    </insert>
</mapper>